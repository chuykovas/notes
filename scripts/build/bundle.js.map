{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAkC;AACc;AACd;;AAEnB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,mBAAmB,oDAAK;;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,iCAAiC,8CAAO;AACxC,MAAM;AACN,iCAAiC,8CAAO;AACxC;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,IAAI,sDAAe;AACnB;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,iDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,+BAA+B,KAAK;AACpC;AACA,2BAA2B,iDAAQ;AACnC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,KAAK;AACnE,kEAAkE,KAAK;AACvE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;ACpN8C;AACpB;AACQ;;;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oDAAK;AACxB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP,IAAI;AACJ;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,8CAAO;AACjC,IAAI;AACJ,0BAA0B,8CAAO;AACjC;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,oDAAa;AACtC;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,uBAAuB,oDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,uBAAuB,oDAAa;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH,gBAAgB,oDAAa;AAC7B;AACA,GAAG;;AAEH,uBAAuB,oDAAa;AACpC;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,oDAAa;AACrC;AACA;AACA,GAAG;;AAEH,oBAAoB,oDAAa;AACjC;AACA;AACA,GAAG;;AAEH,qBAAqB,oDAAa;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH,8BAA8B,oDAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,gCAAgC,oDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,oBAAoB,oDAAa;AACjC;AACA,GAAG;;AAEH;;AAEA,mBAAmB,oDAAa;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkD,kBAAkB;AACpE,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,6CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;ACvQyB;AACf;AACA;;AAEnB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAK;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,oBAAoB,oDAAa;AACjC;AACA;AACA,GAAG;;AAEH,mBAAmB,oDAAa;AAChC;AACA,oBAAoB,iDAAU,kBAAkB;AAChD,GAAG;;AAEH,2BAA2B,oDAAa;AACxC;AACA;AACA,GAAG;;AAEH;;AAEA,uBAAuB,oDAAa;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,eAAe,oDAAa;AAC5B;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA,mBAAmB,oDAAa;AAChC;AACA,oBAAoB,iDAAU,kBAAkB;AAChD,GAAG;;AAEH,yBAAyB,oDAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH,wBAAwB,oDAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH,6BAA6B,oDAAa;AAC1C;AACA,GAAG;;AAEH;;AAEA;AACA;;;;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,mBAAmB;AACpD;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,qCAAqC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;AC7MoC;;AAErB;AACf;AACA;;AAEA;AACA,iCAAiC,kDAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS,YAAY;AAChC;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEO;AACP;;AAEA,YAAY,8BAA8B,EAAE,6BAA6B;AACzE;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEO;;AAEP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;;;;;;UCtEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNwB;;AAExB,gBAAgB,4CAAG;AACnB,W","sources":["webpack://notes/./scripts/app.js","webpack://notes/./scripts/category.js","webpack://notes/./scripts/note.js","webpack://notes/./scripts/store/indexedDB.js","webpack://notes/./scripts/store/store.js","webpack://notes/./scripts/util.js","webpack://notes/webpack/bootstrap","webpack://notes/webpack/runtime/define property getters","webpack://notes/webpack/runtime/hasOwnProperty shorthand","webpack://notes/webpack/runtime/make namespace object","webpack://notes/./scripts/index.js"],"sourcesContent":["import Category from './category';\nimport {compare, convertToBase64} from './util';\nimport Store from './store/store';\n\nexport default function App() {\n  this.state = {\n    categories: [],\n    selectedCategory: null,\n    sortedCategory: false,\n    DB: null,\n  }\n}\n\nApp.prototype.init = function () {\n  this.elements = {\n    forms: {\n      createCategoryForm: document.getElementById('createCategoryForm'),\n      searchForm: document.getElementById('searchForm'),\n    },\n    listCategory: document.getElementById('listCategory'),\n    listNotes: document.getElementById('noteList'),\n    buttons: {\n      createNoteButton: document.querySelector('.add-new-note'),\n      sortCategory: document.getElementById('sortCategory'),\n      addImageToNote: document.getElementById('addImage'),\n      sortByDate: document.getElementById('sortByDate'),\n      sortByName: document.getElementById('sortByName'),\n      makeBoldText: document.getElementById('makeBold'),\n      makeItalicText: document.getElementById('makeItalic'),\n      closeSearchButton: document.getElementById('closeSearchButton'),\n    },\n  }\n\n  this.store = new Store();\n\n  let previousSelectedCategory = '';\n\n  this.store.getAll('general')\n    .then(result => {\n      if (result.length > 0) {\n        previousSelectedCategory = result[0].idSelectedCategory;\n      }\n    });\n\n  this.store.getAll('categories')\n    .then(data => {\n      if (!!data.length) {\n        data.forEach(item => {\n          const category = this.createNewCategory(item.id, item.title);\n          this.state.categories.unshift(category);\n          category.getNotesFromDB();\n          if (previousSelectedCategory === item.id) {\n            this.state.selectedCategory = category;\n          }\n        });\n        this.fullRender();\n\n        if (this.state.selectedCategory) {\n          this.state.selectedCategory.init();\n        }\n      }\n    });\n\n  this.elements.forms.createCategoryForm.addEventListener('submit', event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const nameCategory = formData.get('nameCategory');\n    event.target.reset();\n\n    const date = Date.now();\n    const category = this.createNewCategory(date, nameCategory);\n\n    this.state.categories.unshift(category);\n    this.store.set('categories', category.state.id, {\n      id: category.state.id,\n      title: nameCategory,\n    });\n    this.renderItem();\n  });\n\n  this.elements.buttons.createNoteButton.addEventListener('click', () => {\n    if (this.state.selectedCategory) {\n      this.state.selectedCategory.createNewNote();\n    }\n  });\n\n  this.elements.buttons.sortCategory.addEventListener('click', () => {\n    if (this.state.sortedCategory) {\n      this.state.categories.sort(compare('title', 'desc'));\n    } else {\n      this.state.categories.sort(compare('title'));\n    }\n    this.state.sortedCategory = !this.state.sortedCategory;\n    this.fullRender();\n  });\n\n  this.elements.buttons.sortByDate.addEventListener('click', () => this.state.selectedCategory.sortNote('date'));\n  this.elements.buttons.sortByName.addEventListener('click', () => this.state.selectedCategory.sortNote('title'));\n\n  this.elements.buttons.addImageToNote.addEventListener('change', (event) => {\n    const data = null;\n    convertToBase64(event.target.files[0], (base64Data) => {\n      this.state.selectedCategory.state.selectedNote.addImage(base64Data);\n    });\n  });\n\n  this.elements.buttons.makeBoldText.addEventListener('click', () => {\n    document.execCommand('bold', false, null);\n  });\n\n  this.elements.buttons.makeItalicText.addEventListener('click', () => {\n    document.execCommand('italic', false, null);\n  });\n\n  this.elements.forms.searchForm.addEventListener('submit', event => {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const searchText = formData.get('searchInput');\n    if (searchText) {\n      this.search(searchText);\n      this.elements.buttons.closeSearchButton.style.display = 'block';\n    }\n  });\n\n  this.elements.buttons.closeSearchButton.addEventListener('click', event => {\n    event.preventDefault();\n    this.elements.forms.searchForm.reset();\n    this.fullRender();\n    this.state.selectedCategory.init();\n  });\n}\n\nApp.prototype.fullRender = function () {\n  this.elements.listCategory.innerHTML = '';\n  const categories = this.state.categories.map(item => item.htmlContainer);\n  this.elements.listCategory.append(...categories);\n  if (this.state.selectedCategory) {\n    this.state.selectedCategory.htmlContainer.classList.add('checked');\n  }\n}\n\nApp.prototype.renderItem = function () {\n  const category = this.state.categories[0];\n  this.elements.listCategory.prepend(category.htmlContainer);\n}\n\nApp.prototype.createNewCategory = function (date, nameCategory) {\n  const category = new Category({\n    id: date,\n    title: nameCategory || 'Без имени',\n    onClick: (category) => {\n      this.state.selectedCategory = category;\n      this.state.categories.forEach(item => item.htmlContainer.classList.remove('checked'));\n      this.state.selectedCategory.htmlContainer.classList.add('checked');\n      this.state.selectedCategory.init();\n\n      this.store.set('general', 0, {\n        idSelectedCategory: this.state.selectedCategory.state.id,\n        idSelectedNote: this.state.selectedCategory.state.selectedNote?.state.date || '',\n      });\n    },\n    onDelete: (category) => {\n      this.state.categories = this.state.categories.filter(item => item !== category);\n      this.fullRender();\n\n      if (this.state.categories.length > 0) {\n        this.state.selectedCategory = this.state.categories[0];\n        this.state.selectedCategory?.init();\n        this.store.set('general', 0, {\n          idSelectedCategory: this.state.selectedCategory?.state.id || '',\n          idSelectedNote: this.state.selectedCategory.state.selectedNote?.state.date || '',\n        });\n      } else {\n        this.store.deleteItem('general', 0);\n      }\n    },\n    onUpdate: () => this.fullRender(),\n  });\n\n  return category;\n}\n\nApp.prototype.search = function (text) {\n  const regexp = new RegExp(`${text}`, 'gi');\n  const date = Date.now();\n  const searchResult = new Category({\n    id: date,\n    title: 'Результаты поиска',\n  });\n  searchResult.htmlContainer.querySelector('.kebab-menu-button').remove();\n  searchResult.htmlContainer.classList.add('checked');\n  this.elements.listCategory.innerHTML = '';\n  this.elements.listCategory.prepend(searchResult.htmlContainer);\n\n  this.store.getAll('notes')\n    .then(result => {\n      result.forEach(item => {\n        const titleIncludesText = item.title.toLowerCase().includes(text);\n        const contentIncludesText = item.content.toLowerCase().includes(text);\n\n        if (titleIncludesText || contentIncludesText) {\n          item.title = item.title.replaceAll(regexp, `<mark>${text}</mark>`);\n          item.content = item.content.replaceAll(regexp, `<mark>${text}</mark>`);\n          const foundNote = searchResult.renderNote(item.idCategory, item.title, item.content, item.date);\n          foundNote.htmlContainer.querySelector('.delete-note-button').remove();\n          searchResult.addNote(foundNote);\n        }\n      });\n      searchResult.htmlContainer.children[1].textContent = searchResult.state.notes.length;\n      searchResult.state.selectedNote = searchResult.state.notes[0];\n      searchResult.init();\n    });\n}","import {compare, createElement} from './util';\nimport Note from './note';\nimport Store from './store/store';\n\n\nfunction Category(params) {\n  this.state = {\n    id: params.id,\n    title: params.title,\n    notes: [],\n    sortedNote: false,\n    selectedNote: null,\n    onClick: params.onClick,\n    onDelete: params.onDelete,\n    onUpdate: params.onUpdate,\n  };\n\n  this.htmlContainer = this.renderCategory();\n  this.store = new Store();\n}\n\nCategory.prototype.init = function () {\n  this.elements = {\n    listNote: document.getElementById('noteList'),\n    listContent: document.getElementById('contentContainer'),\n  };\n\n  if (!this.state.notes.length) {\n    let previousSelectedNote = null;\n    this.store.getAll('general').then(result => {\n      if (result.length > 0) {\n        previousSelectedNote = result[0].idSelectedNote;\n      }\n    });\n    this.store.getByIndex('notes', 'idCategory', this.state.id)\n      .then(result => {\n        this.state.notes = [];\n        result.forEach(item => {\n          const note = this.renderNote(this.state.id, item.title, item.content, item.date);\n          this.addNote(note);\n          if (item.date === previousSelectedNote) {\n            this.state.selectedNote = note;\n          }\n        });\n\n        this.renderAllNote();\n\n        if (this.state.selectedNote) {\n          this.state.selectedNote?.init();\n        } else {\n          this.elements.listContent.innerHTML = '';\n        }\n      });\n  } else {\n    this.renderAllNote();\n\n    if (this.state.selectedNote) {\n      this.state.selectedNote?.init();\n    } else {\n      this.elements.listContent.innerHTML = '';\n    }\n  }\n}\n\nCategory.prototype.getNotesFromDB = function (select) {\n  this.store.getByIndex('notes', 'idCategory', this.state.id)\n    .then(result => {\n      result.forEach(item => {\n        const note = this.renderNote(item.idCategory, item.title, item.content, item.date);\n        this.addNote(note);\n      });\n\n      this.htmlContainer = this.renderCategory();\n      this.state.onUpdate();\n    });\n}\n\nCategory.prototype.delete = function () {\n  //удаление со страницы\n  this.elements.listNote.innerHTML = '';\n  this.elements.listContent.innerHTML = '';\n  //удаление из хранилища\n  this.store.deleteItem('categories', this.state.id);\n  this.store.deleteNotes('notes', 'idCategory', this.state.id);\n  //удаление из state приложения\n  this.state.onDelete(this);\n}\n\n/**\n *\n * @param {string} newName - новое имя категории\n */\nCategory.prototype.rename = function (newName) {\n  this.state.title = newName;\n  //меняем название категории\n  this.htmlContainer = this.renderCategory();\n  this.state.onUpdate();\n\n  this.store.set('categories', this.state.id, {\n    id: this.state.id,\n    title: this.state.title,\n  });\n}\n\nCategory.prototype.addNote = function (note) {\n  this.state.notes.unshift(note);\n}\n\nCategory.prototype.sortNote = function (sortField) {\n  if (this.state.sortedNote) {\n    this.state.notes.sort(compare(sortField, 'desc'));\n  } else {\n    this.state.notes.sort(compare(sortField));\n  }\n\n  this.state.sortedNote = !this.state.sortedNote;\n  this.renderAllNote();\n}\n\nCategory.prototype.renderPopup = function () {\n  const popupInputText = createElement('input', {\n    className: 'popup-input',\n    type: 'text',\n    placeholder: 'Введите название',\n    autofocus: true,\n    maxLength: '50',\n  });\n\n  const acceptButton = createElement('button', {\n    className: 'popup-button',\n    textContent: 'Принять',\n    onclick: (event) => {\n      event.preventDefault();\n      this.rename(popupInputText.value || this.state.title);\n      popupWrapper.remove();\n    }\n  });\n\n  const cancelButton = createElement('button', {\n    className: 'popup-button',\n    textContent: 'Отмена',\n    onclick: (event) => {\n      event.preventDefault();\n      popupWrapper.remove();\n    },\n  });\n\n  const popup = createElement('form', {\n    className: 'popup-form',\n  });\n\n  const popupWrapper = createElement('div', {\n    className: 'popup-wrapper',\n  });\n\n  popup.append(popupInputText, acceptButton, cancelButton);\n  popupWrapper.append(popup);\n\n  return popupWrapper;\n}\n\nCategory.prototype.renderCategory = function () {\n  const categoryTitle = createElement('h3', {\n    className: 'category-title',\n    textContent: this.state.title\n  });\n\n  const noteCount = createElement('p', {\n    className: 'notes-count',\n    textContent: this.state.notes.length\n  });\n\n  const menuButton = createElement('button', {\n    className: 'kebab-menu-button',\n    onclick: (event) => {\n      event.stopPropagation();\n      kebabMenu.classList.toggle('active');\n    },\n  });\n\n  const kebabMenuButtonEdit = createElement('li', {\n    className: 'kebab-menu-item',\n    textContent: 'Редактировать',\n    onclick: event => {\n      event.stopPropagation();\n      const popup = this.renderPopup();\n      document.body.append(popup);\n      kebabMenu.classList.remove('active');\n    }\n  });\n\n  const kebabMenuButtonDelete = createElement('li', {\n    className: 'kebab-menu-item',\n    textContent: 'Удалить',\n    onclick: (event) => {\n      event.stopPropagation();\n      this.delete();\n    }\n  });\n\n  const kebabMenu = createElement('ul', {\n    className: 'kebab-menu'\n  });\n\n  kebabMenu.append(kebabMenuButtonEdit, kebabMenuButtonDelete);\n\n  const category = createElement('div', {\n    className: 'category',\n    onclick: () => {\n      this.state.onClick(this);\n    },\n    onmouseleave: () => kebabMenu.classList.remove('active'),\n  });\n\n  category.append(categoryTitle, noteCount, menuButton, kebabMenu);\n\n  return category;\n}\n\nCategory.prototype.renderAllNote = function () {\n  this.elements.listNote.innerHTML = '';\n\n  if (!this.state.notes.length) {\n    this.elements.listNote.prepend(`В категории ${this.state.title} заметок нет`);\n  } else {\n    const notes = this.state.notes.map(item => item.htmlContainer);\n\n    if (this.state.selectedNote) {\n      this.state.notes.forEach(item => item.htmlContainer.classList.remove('checked'));\n      this.state.selectedNote.htmlContainer.classList.add('checked');\n    }\n    this.elements.listNote.prepend(...notes);\n  }\n}\n\nCategory.prototype.renderNote = function (id, title='', content='', date) {\n  const newNote = new Note({\n    idCategory: id,\n    title,\n    content,\n    date,\n    onClick: (note) => {\n      this.state.selectedNote = note;\n      this.state.selectedNote.init();\n      this.state.notes.forEach(item => item.htmlContainer.classList.remove('checked'));\n      this.state.selectedNote.htmlContainer.classList.add('checked');\n\n      this.store.set('general', 0, {\n        idSelectedCategory: this.state.id,\n        idSelectedNote: this.state.selectedNote.state.date,\n      });\n    },\n    onDelete: (note) => {\n      this.state.notes = this.state.notes.filter(item => item !== note);\n      this.htmlContainer = this.renderCategory();\n      this.state.onUpdate();\n    },\n    onUpdate: () => this.renderAllNote(),\n  });\n\n  return newNote;\n}\n\nexport default Category;\n","import {createElement, formatDate} from './util';\nimport Category from './category';\nimport Store from './store/store';\n\nexport default function Note(params) {\n  this.state = {\n    idCategory: params.idCategory,\n    title: params.title,\n    content: params.content,\n    date: params.date,\n    onClick: params.onClick,\n    onDelete: params.onDelete,\n    onUpdate: params.onUpdate,\n  };\n  this.htmlContainer = this.render();\n  this.noteContent = this.renderNoteContent();\n  this.store = new Store();\n}\n\nNote.prototype.init = function () {\n  this.elements = {\n    contentContainer: document.querySelector('.note-content-container'),\n  };\n\n  this.elements.contentContainer.innerHTML = '';\n  this.elements.contentContainer.append(this.noteContent);\n}\n\nNote.prototype.delete = function () {\n  this.htmlContainer.remove();\n  this.noteContent.innerHTML = '';\n  this.store.deleteItem('notes', this.state.date);\n}\n\nNote.prototype.addImage = function (source) {\n  this.state.content += `<img src=\"${source}\">`;\n  this.noteContent = this.renderNoteContent();\n  this.store.set('notes', this.state.date, {\n    idCategory: this.state.idCategory,\n    date: this.state.date,\n    title: this.state.title,\n    content: this.state.content,\n  });\n  this.init();\n}\n\nNote.prototype.render = function () {\n  const titleNote = createElement('h3', {\n    className: 'note-title',\n    innerHTML: this.state.title || 'Заметка без названия'\n  });\n\n  const dateNote = createElement('span', {\n    className: 'note-date',\n    textContent: `${formatDate(this.state.date)}`\n  });\n\n  const shortDescription = createElement('p', {\n    className: 'note-description',\n    innerHTML: this.state.content.substring(0, 25),\n  });\n\n  shortDescription.prepend(dateNote);\n\n  const deleteButton = createElement('button', {\n    className: 'delete-note-button',\n    onclick: () => {\n      this.delete();\n      this.state.onDelete(this);\n    }\n  });\n\n  const note = createElement('div', {\n    className: 'note',\n    onclick: () => this.state.onClick(this),\n  });\n\n  note.append(titleNote, shortDescription, deleteButton);\n\n  return note;\n}\n\nNote.prototype.renderNoteContent = function () {\n  const noteDate = createElement('div', {\n    className: 'note-content-date',\n    textContent: `${formatDate(this.state.date)}`\n  });\n\n  const noteTitleInput = createElement('div', {\n    className: 'note-content-title',\n    contentEditable: 'true',\n    innerHTML: this.state.title,\n    placeholder: 'Название заметки',\n    oninput: (event) => {\n      this.state.title = event.target.textContent;\n      this.store.set('notes', this.state.date, {\n        idCategory: this.state.idCategory,\n        date: this.state.date,\n        title: this.state.title,\n        content: this.state.content,\n      });\n      this.htmlContainer = this.render();\n      this.state.onUpdate();\n    }\n  });\n\n  const noteTextInput = createElement('div', {\n    className: 'note-content-text',\n    contentEditable: 'true',\n    placeholder: 'Текст заметки',\n    innerHTML: this.state.content,\n    oninput: (event) => {\n      this.state.content = event.target.innerHTML;\n      this.store.set('notes', this.state.date, {\n        idCategory: this.state.idCategory,\n        date: this.state.date,\n        title: this.state.title,\n        content: this.state.content,\n      });\n      this.htmlContainer = this.render();\n      this.state.onUpdate();\n    }\n  });\n\n  const noteContentWrapper = createElement('div', {\n    className: 'note-content-body',\n  });\n\n  noteContentWrapper.append(noteDate, noteTitleInput, noteTextInput);\n\n  return noteContentWrapper;\n}","/**\n * инициальзация базы данных\n * @param dbName - имя базы данных\n * @param dbVersion - версия базы данных\n * @param dbUpgrade - callback для обновления базы данных\n * @constructor\n */\n\nexport default function IndexedDB(dbName, dbVersion, dbUpgrade) {\n  this.dbName = dbName;\n  this.dbVersion = dbVersion;\n  this.dbUpgrade = dbUpgrade;\n\n  return new Promise((resolve, reject) => {\n\n    // объект базы данных\n    this.db = null;\n\n    // если не поддерживается IndexedDB\n    if (!('indexedDB' in window)) reject('not supported');\n\n    // открытие базы данных\n    const dbOpen = indexedDB.open(this.dbName, this.dbVersion);\n\n    if (this.dbUpgrade) {\n      // database upgrade event\n      dbOpen.onupgradeneeded = e => {\n        this.dbUpgrade(dbOpen.result, e.oldVersion, e.newVersion);\n      };\n    }\n\n    dbOpen.onsuccess = () => {\n      this.db = dbOpen.result;\n      resolve(this);\n    };\n\n    dbOpen.onerror = e => {\n      reject(`IndexedDB error: ${e.target.errorCode}`);\n    };\n  });\n}\n\n/**\n * запись в базу данных\n * @param storeName - имя хранилища\n * @param name - название для поля key\n * @param value - записываемое значение\n * @returns {Promise<unknown> | Promise<unknown>} возврщает промис\n */\nIndexedDB.prototype.set = function (storeName, name, value) {\n  return new Promise((resolve, reject) => {\n    // новая транзакция\n    const transaction = this.db.transaction(storeName, 'readwrite');\n    const store = transaction.objectStore(storeName);\n    // запись в базу\n    store.put(value, name);\n\n    transaction.oncomplete = () => {\n      resolve(true);\n    };\n\n    transaction.onerror = () => {\n      reject(transaction.error);\n    };\n  });\n}\n\n/**\n * получение одного значения из базы данных\n * @param storeName - имя хранилища\n * @param name - значение key для получения элемента из базы\n * @returns {Promise<unknown> | Promise<unknown>}\n */\nIndexedDB.prototype.get = function (storeName, name) {\n  return new Promise((resolve, reject) => {\n    // новая транзакция\n    const transaction = this.db.transaction(storeName, 'readonly');\n    const store = transaction.objectStore(storeName);\n\n    // чтение из базы\n    const request = store.get(name);\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onerror = () => {\n      reject(request.error);\n    };\n  });\n}\n\n/**\n * получение всех значений из базы данных\n * если передан параметр searchName будут найдены все записи с этим значением\n * @param storeName - имя хранилища\n * @param searchName - поле для поиска\n * @returns {Promise<unknown> | Promise<unknown>}\n */\nIndexedDB.prototype.getAll = function (storeName, searchName) {\n  return new Promise((resolve, reject) => {\n    //новая транзакция\n    const transaction = this.db.transaction(storeName, 'readonly');\n    const store = transaction.objectStore(storeName);\n    let request = null;\n    //чтение из базы\n    if (searchName) {\n      request = store.getAll(searchName);\n    } else {\n      request = store.getAll();\n    }\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onerror = () => {\n      reject(request.error);\n    };\n  })\n}\n\n/**\n * получение записей из базы данных по индексу\n * @param storeName - имя хранилища\n * @param nameIndex - название индекса\n * @param value - значение индекса\n * @returns {Promise<unknown> | Promise<unknown>}\n */\nIndexedDB.prototype.getByIndex = function (storeName, nameIndex, value) {\n  return new Promise((resolve, reject) => {\n    //новая транзакция\n    const transaction = this.db.transaction(storeName, 'readonly');\n    const store = transaction.objectStore(storeName);\n    const index = store.index(nameIndex);\n    const request = index.getAll(value);\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n\n    request.onerror = () => {\n      reject(request.error);\n    };\n  })\n}\n\n/**\n * удаление записи из базы данных\n * @param storeName - имя хранилища\n * @param id - ключ удаляемого элемента\n * @returns {Promise<unknown> | Promise<unknown>}\n */\nIndexedDB.prototype.deleteEntry = function (storeName, id) {\n  return new Promise((resolve, reject) => {\n    const transaction = this.db.transaction(storeName, 'readwrite');\n    const store = transaction.objectStore(storeName);\n\n    // запись в базу\n    store.delete(id);\n\n    transaction.oncomplete = () => {\n      resolve(true);\n    };\n\n    transaction.onerror = () => {\n      console.log('чет видимо не так пошло в deleteentry');\n      reject(transaction.error);\n    };\n  });\n}\n\n/**\n * удаление всех записей с указанным индексом\n * @param storeName - имя хранилища\n * @param nameIndex - название индекса\n * @param indexValue - значение индекса\n * @returns {Promise<unknown> | Promise<unknown>}\n */\nIndexedDB.prototype.deleteMultipleEntries = function (storeName, nameIndex, indexValue) {\n  return new Promise((resolve, reject) => {\n    //новая транзакция\n    const transaction = this.db.transaction(storeName, 'readwrite');\n    const store = transaction.objectStore(storeName);\n    const index = store.index(nameIndex);\n\n    const request = index.openKeyCursor(IDBKeyRange.only(indexValue));\n\n    request.onsuccess = () => {\n      let cursor = request.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      }\n    };\n\n    transaction.oncomplete = () => {\n      resolve(true);\n    };\n\n    transaction.onerror = () => {\n      console.log('чет видимо не так пошло в deleteentry');\n      reject(transaction.error);\n    };\n  })\n}","import IndexedDB from './indexedDB';\n\nexport default function Store(storeName) {\n  this.DB = null;\n}\n\nStore.prototype.dbConnect = async function () {\n  this.DB = this.DB || await new IndexedDB(\n    'Notes',\n    1,\n    (db, oldVersion, newVersion) => {\n      // обновление базы данных\n      switch (oldVersion) {\n        case 0: {\n          let storeCategories = db.createObjectStore('categories');\n          let storeNotes = db.createObjectStore('notes');\n          let storeGeneral = db.createObjectStore('general');\n          storeNotes.createIndex('idCategory', 'idCategory');\n        }\n      }\n    });\n\n  return this.DB;\n}\n\nStore.prototype.set = async function (storeName, name, value) {\n  // обновление базы данных\n  const db = await this.dbConnect();\n  await db.set(storeName, name, value);\n}\n\nStore.prototype.get = async function (storName, name) {\n  const db = await this.dbConnect();\n\n  return await db.get(storeName, name);\n}\n\nStore.prototype.getAll = async function (storeName, seachName) {\n  const db = await this.dbConnect();\n\n  return await db.getAll(storeName, seachName);\n}\n\nStore.prototype.getByIndex = async function (storeName, nameIndex, value) {\n  const db = await  this.dbConnect();\n\n  return await db.getByIndex(storeName, nameIndex, value);\n}\n\nStore.prototype.deleteItem = async function (storeName, id) {\n  const db = await this.dbConnect();\n  await db.deleteEntry(storeName, id);\n}\n\nStore.prototype.deleteNotes = async function (storeName, index, id) {\n  const db = await this.dbConnect();\n  await db.deleteMultipleEntries(storeName, index, id);\n}","/**\n *\n * @param {string} tag -  HTML-тег элемента\n * @param {Object} {attributes} - объект атрибутов элемента\n * @param\n */\n\nexport function createElement(tag, attributes) {\n  const element = document.createElement(tag);\n\n  if (attributes) {\n    Object.keys(attributes).forEach(key => {\n      if (tag === 'div' && key === 'placeholder') {\n        element.setAttribute(key, attributes[key])\n      } else {\n        element[key] = attributes[key];\n      }\n    });\n  }\n\n  return element;\n}\n\nexport function formatDate(date) {\n  const dateNow = new Date(date);\n\n  return `${dateNow.toLocaleDateString()} ${dateNow.toLocaleTimeString()}`;\n}\n\n/**\n *\n * @param input\n * @returns {*}\n */\n\nexport function convertToBase64(file, callback) {\n\n  const reader = new FileReader();\n\n  reader.addEventListener('load', () => callback(reader.result));\n\n  reader.readAsDataURL(file);\n}\n\n/**\n *\n * @param key\n * @param order\n * @returns {function(*, *): number|number}\n */\nexport function compare(key, order = 'asc') {\n  return function (a, b) {\n    const firstName = a.state[key];\n    const secondName = b.state[key];\n\n    if (firstName.typeof === 'string' && secondName.typeof === 'string') {\n      firstName = firstName.toUpperCase();\n      secondName = secondName.toUpperCase();\n    }\n\n    let comparison = 0;\n\n    if (firstName > secondName) {\n      comparison = 1;\n    } else if (firstName < secondName) {\n      comparison = -1;\n    }\n\n    return order === 'desc' ? comparison * -1 : comparison;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import App from './app';\n\nconst app = new App();\napp.init();"],"names":[],"sourceRoot":""}